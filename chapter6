'''
#notes
prev = 7
while prev <= 37:
    if 37 - prev < 7:
        print(prev)
    prev += 7
print(prev)


lst = [3, 1, -7, -4, 9, -2]

for i in lst:
    if i < 0:
        print(lst.index(i))
        break

def fibonacci(bound):
    'returns the smallest Fibonacci number greater than bound'
    previous = 1	        # previous Fibonacci number
    current = 1	        # current Fibonacci number
    while current <= bound:
        # current becomes previous, and new current is computed
        previous, current = current, previous+current
    return current
fibonacci(100)

name = input('What is your name? ')
print('Hello {}'.format(name))
while name != 'quit':
    name = input('What is your name? ')
    if name == '':
        continue
    print('Hello {}'.format(name))
'''
grocery = ['bread', 'milk', 'butter']
for item in enumerate(grocery):  
    print(item)

print('\n')

for count, item in enumerate(grocery): 
    print(count, item)


fam = {1:'rey',2:'alb',3:'sal',4:'reina'}
fam[5] = 'mom'
print(fam)

#6.1
def birthState(name):
    
    pres = {'Barack Hussein Obama II':'Hawaii',
            'George Walker Bush':'Connecticut',
            'William Jefferson Clinton':'Arkansas',
            'George Herbert Walker Bush':'Massachussetts',
            'Ronald Wilson Reagan':'Illinois',
            'James Earl Carter, Jr':'Georgia'}

    print(pres[name])

birthState('Ronald Wilson Reagan')

#6.2
def rlookup(phone):

    rphonebook = {'(123)456-78-90':['Anna','Karenina'],
                  '(901)234-56-78':['Yu', 'Tsun'],
                  '(321)908-76-54':['Hans', 'Castorp']}
    if phone in rphonebook:
        print(rphonebook[phone])
    else:
        print('The number you entered is not in use.')

rlookup('(123)456-78-90')
rlookup('(453)454-55-00')

#6.3
def freq(student):
    
    count = {}
    for name in student:
        if name in count:
            count[name] += 1
        else:
            count[name] = 1
    
    print(count)
        
freq(['Cindy', 'John', 'Cindy', 'Adam', 'Adam',
      'Jimmy', 'Joan', 'Cindy', 'Joan'])
      
#6.4
def wordcount(phrase):
    count = {}
    phrase = phrase.split()
    for i in phrase:
        if i in count:
            count[i] += 1
        else:
            count[i] = 1
            
    print(count)
    
wordcount('all animals are equal but some \ animals are more equal than others')

#6.5
def lookup():
    phonebook = {('Anna','Karenina'):'(123)456-78-90',
                 ('Yu', 'Tsun'):'(901)234-56-78',
                 ('Hans', 'Castorp'):'(321)908-76-54'}
        key1 = input('Enter first name: ')
        key2 = input('Enter last name: ')
    
    print(phonebook[key1,key2])

lookup()

#6.7
def encoding(x):
    print('Char Decimal Hex Binary')
    for i in x:
        code = ord(i)
        
        print(' {} {:5} {:5x} {:7b}'.format(x,code,code,code))
        

encoding('dad')

#6.8
def char(low,high):
    for i in range(low,high+1):
        print('{} : {}'.format(i,chr(i)))
    
char(62,67)

#6.9
def guesss(x):
    import random
    ans = random.randrange(x)
    print(ans)

    guess = eval(input('Enter your guess '))
    
    while guess != ans:

        if guess > ans:
            print('Too high')
        elif guess < ans:
            print('Too low')
            
        guess = eval(input('Enter your guess '))
        
    print('You got it!')
    
guesss(100)

#6.10
def approxPi(n):
    import random

    k = 0
    for i in range(n):
        x = random.uniform(-1,1)
        y = random.uniform(-1,1)
        if x**2 + y**2 <= 1:
            k += 1
    print(4*k/n)
    
approxPi(100000)

#6.11
def easyCrypto(x):
    alpha = '0abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
    for i in x:
        ind = alpha.find(i)#index
        if ind % 2 != 0:
            print(alpha[ind+1],end='')#if odd
        else:
            print(alpha[ind-1],end='')#if even
    print()
    
easyCrypto('abc')
easyCrypto('ZOO')

#6.12
def letter2number(grade):
    gpa = {'A':4.0,'B':3.0,'C':2.0,'D':1.0,'F':0}
    if len(grade) == 1:
        print(gpa[grade[0]])
    else:
        if grade[1] =='+':
            print(gpa[grade[0]]+.3)
        elif grade[1] == '-':
            print(gpa[grade[0]]-.3)
    
letter2number('A-')
letter2number('B+')
letter2number('D')

#6.13 adn 6.14
 
agencies = {'CCC':'Civilian Conservation Corps','FCC':'Federal Communications Commission','FDIC':'Federal Deposit Insurance Corporation','SSB':'Social Security Board','WPA':'Works Progress Administration'}

name = agencies.keys()
for i in name:
    print(agencies[i])

agencies['SEC'] = 'Securities and Exchange Commission'
agencies['SSB'] = 'Social Security Administration'
agencies.pop('CCC')
agencies.pop('WPA')
print('\n',agencies,'\n')

for i in name:
    print(agencies[i])

'''
#6.15
def lookup():
    phonebook = {('Anna','Karenina'):['(123)456-78-90','(516)-869-2944'],
                 ('Yu', 'Tsun'):['(901)234-56-78'],
                 ('Hans', 'Castorp'):['(321)908-76-54']}
    key1 = input('Enter first name: ')
    key2 = input('Enter last name: ')
    
    print(phonebook[key1,key2])

lookup()

#6.16
def hw():
    mult3 = set()
    mult5 = set()
    mult7 = set()
    
    count = 0
    
    for i in range(3,100,3):
        mult3.add(i)
        
    for i in range(5,100,5):
        mult5.add(i)  
        
    for i in range(7,100,7):
        mult7.add(i)

    print('Multiples of 35 are ',mult5 & mult7)
    print('Multiples of 105 are',mult3 & mult5 & mult7)
    print('Multiples of 3 or 7 are ',mult3 | mult7)
    print('Multiples of 3 or 7, but not both are ', mult3 ^ mult7)
    print('Multiples of 7 that are not multiples of 3 are ',mult7 - mult3)

hw()
'''
#6.17
#6.18
def coin():
    import random
    
    coin = ['heads','tails']
    
    print(random.sample(coin,1))
    
coin()
    
#6.19
def translate():
    english = 'My name is Ada'
    arabic = '#اسمي أدا'
    japanese = '私の名前はアダです'
    serbian = 'Зовем се Ада'

    for i in arabic:
        print(ord(i),end=',')
 
    for i in japanese:
        print(ord(i),end=',')
        
    for i in serbian:
        print(ord(i),end=',')

    for i in english:
        print(ord(i),end=',')
        
translate()

#6.20
def reverse():

    phonebook = {'Smith, Jane':'123-45-67',
    'Doe, John':'987-65-43','Baker,David':'567-89-01'}

    rev = []
    reverse = {}

    key = phonebook.keys()
    
    for i in key:
        rev.append(i)
        
    for i in rev:
        reverse[phonebook[i]] = i
        
    print(reverse)

reverse()
'''
#6.21

#6.22
def mirror(word):
    
    mirror = ''
    sym = 'bdiovwx'
    for i in range(1,len(word)+1):
        if word[-i] in sym:
            mirror += word[-i]
    if len(mirror) == len(word):
        print(mirror)
    else:
        print('INVALID')

mirror('vow')
mirror('wood')
mirror('bed')

#6.23
def scary():

    frank = open('U:/Python/frankenstein.txt','r')
    story = frank.readlines()
    frank.close()#opens text file and puts it in variable story
       
    dict = open('U:/Python/dictionary.txt','w')#file we will write into
    dictionary = set()#to eliminate duplicates
    
    for i in story:#eliminate punctuation and \n
        punct = i.maketrans('.;,?-:',' '*6)
        line = i.translate(punct)
        line = line.strip()        
        line = line.split(' ')#convert string into list of words
        for j in line:
            if len(j) > 2:
                dictionary.add(j)
    dictionary = list(dictionary)#convert set into list
    dictionary.sort()#alphabetize
    
    for k in dictionary:#puts list into text file
        dict.write(k)
        dict.write('\n')

    dict.close()
    #print(dictionary)#testing only
scary()

#6.24
def names():
    student = input('Enter a student name ')
    Class = []
        
    while student != '':
        Class.append(student)
        student = input('Enter a student name ')
    
    dupl = set(Class)    
    for i in dupl:
        if Class.count(i) == 1:
            print('There is {} student named {}'.format(Class.count(i),i))
        else:
            print('There are {} students named {}'.format(Class.count(i),i))

names()

#6.25
def different(table):
    entries = set()
    for i in table:
        for j in i:
            entries.add(j)
    print(len(entries))
    
different([[1,0,1],[0,1,0]])
different([[32,12,52,63],[32,64,67,52],[64,64,17,34],[34,17,76,98]])

#6.26
def week():
    abbr = {'Mo':'Monday','Tu':'Tuesday','We':'Wednesday','Th':'Thursday','Fr':'Friday','Sa':'Saturday','Su':'Sunday'}

    day = input('Enter day abbreviation ')

    while day != '':
        print(abbr[day])
        day = input('Enter day abbreviation ')          
week()
'''
'''
#6.27
def index(text,words):
    raven = open(text,'r')
    story = raven.readlines()
    raven.close()
    num = []
    
    for i in words:
        #print(i)
        count = []
        num.append(count)
        for j in range(len(story)):# j is line
            if i in story[j]:
                count.append(j)
                #print(j,end=',')
    
    for k in range(len(words)):
        print('\n',words[k])
        for l in num[k]:
            print(l,end=',')
        
index('U:/Python/Raven.txt', ['Raven', 'mortal', 'dying', 'ghost','ghastly', 'evil','demon'])

#6.28 ?
#6.29
def networks(num,friends):
    students = set()
    for i in friends:
        for j in i:
            students.add(j)
           
    for i in students:
        network = set()
        for j in friends:
            if i in j:
                network.add(j[0])
                network.add(j[1])
        print(network)

    #print(students)
networks(5, [(0, 1), (1, 2), (3, 4)])
#not sure
'''
#6.30
'''
def rockPaperScissors(n):
    score = []
    for i in range(n):
        
        print('\nRock, paper, scissors say shoot ')
        player1 = input('Player 1, please enter your selection ')
        player2 = input('Player 2, please enter your selection ')
    
        
        if player1 == player2:
            pass
            
        elif player1 == 'rock': 
            if player2 == 'paper':
                score.append(2)
                #print('player2 wins')
            else:
                score.append(1)
                #print('player1 wins')
                
        elif player1 == 'paper': 
            if player2 == 'scissors':
                score.append(2)
                #print('player2 wins')
            else: 
                score.append(1)
                #print('player1 wins')
                
        elif player1 == 'scissors': 
            if player2 == 'rock':
                score.append(2)
                #print('player2 wins')
            else: 
                score.append(1)
                #print('player1 wins')
        
        else:
            print('learn to play the game bozo ')
                
        #return score
    if score.count(1) > score.count(2):
        print('Player 1 wins! ')
    elif score.count(2) > score.count(1):
        print('Player 2 wins! ')
    else:
        print('It is a tie! ')
    #print(score)#winner of each round

rockPaperScissors(2)

#6.31
def craps(n):
    import random
    wins = 0
    for i in range(n):
        roll = 'roll again' 
        while roll == 'roll again':
            die1 = random.randrange(1,7)
            die2 = random.randrange(1,7)
            total = die1 + die2
            if total in [7,11]:
                print('you win! ')
                wins += 1
                roll = ''
            elif total in [2,3,12]:
                print('you lose! ')
                roll = ''
            else:
                #print('roll again')
                roll = 'roll again'
        
    print(wins/n)#test purposes only
craps(10)
'''
'''
#6.32
#6.33
def diceprob(x):
    
    import random
    die1 = random.randrange(1,7)
    die2 = random.randrange(1,7)
    count = 0
    roll = 0
    
    while count != 100:
        die1 = random.randrange(1,7)
        die2 = random.randrange(1,7)
        total = die1 + die2
        roll += 1
        
        if total == x:
            count += 1
    print('It took {} rolls to get 100 rolls of {} '.format(roll,x))
    
    
diceprob(2)
diceprob(3)
diceprob(4)
diceprob(5)
diceprob(6)
diceprob(7)
'''
#6.34
import random
deck = 2*[2,3,4,5,6,7,8,9,10,11,12,13,14,15]
random.shuffle(deck)    
player1 = []
player2 = []

def split_deck():
    for i in range(0,len(deck),2):#split deck
        player1.append(deck[i])
        player2.append(deck[i+1])
    
def shuffle():
    random.shuffle(player1)
    random.shuffle(player2)
    

def play():
    warCount = 0
    battleCount = 0
    player1_Score = 0
    player2_Score = 0
    doubleWar = 0
        
    while len(player1) > 0 and len(player2) > 0:#until a player runs out of cards
        card1 = player1[0]
        card2 = player2[0]
        #see who wins battle
        if card1 == card2:#war
            print('This is War!!!')
            warCount += 1
            #choose cards
            if len(player1) >= 4:#checks to see if player has sufficient cards for war
                card1 = max(player1[1],player1[2],player1[3])#takes highest of next 3 cards
            else:
                card1 = max(player1)#if player doesnt have 3 cards, takes highest card
            if len(player2) >= 4:
                card2 = max(player2[1],player2[2],player2[3])
            else:
                card2 = max(player2)
            #see who wins war        
            if card1 == card2:#double war
                print('Double War!!!')
                doubleWar += 1
                #avoids having to go to double and triple wars
                #declares a tie and splits the points
                player1_Score += .5
                player2_Score += .5
            elif card1 > card2: #1 wins
                if len(player2) > 3:
                    #gives all cards to winner
                    player1.extend([player2[1],player2[2],player2[3]])
                    player2[0:4] = []#removes cards from loser
                    player1_Score += 1
                else:
                    player1_Score += 1
                    break#player1 took all of player2's cards
                    
    
            elif card1 < card2: #2 wins
                if len(player1) > 3:
                    player2.extend([player1[1],player1[2],player1[3]])
                    player1[0:4] = []
                    player2_Score += 1
                else:
                    player2_Score += 1
                    break#player2 took all the cards
                
            print('war cards ',card1, card2)
                                        
        elif card1 > card2: #1 wins
            #gives both cards to winner
            player1.append(card2)
            player2.remove(card2)#removes cards from loser
            player1_Score += 1

        elif card1 < card2: #2 wins
            player2.append(card1)
            player1.remove(card1)
            player2_Score += 1
            
        battleCount += 1
        print('Player 1 card {:2}  Player 2 card {:2}'.format(card1,card2))
            
        shuffle()
    
    print('='*60)
    print('\nBattles ',battleCount)
    print('Wars ',warCount)
    print('Double Wars ',doubleWar)
    print('Player 1 score ',player1_Score)
    print('Player 2 score ',player2_Score)
    
def war():
    
    split_deck()
    shuffle()
    play()
    
    
war()

